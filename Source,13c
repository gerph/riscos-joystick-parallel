IN   -
OUT  JoystickParallel
Type Module
Ver  1.01a

Pre
  Parallel_Op = &42ec1
  XParallel_Op = Parallel_Op OR &20000
End Pre

Define Module
 Name    JoystickJF
 Help    JoystickJF
 Author  Justin Fletcher
 SWIs
  Prefix Joystick
  Base   &43F40
   0     Read           joyread
 End SWIs
End Module

.joyread
   STMFD   (sp)!,{r1-r5,link}            ; Stack registers
   CMP     r0,#0                         ; is this stick 0 ?
   BEQ     readstick0
   MOVS    r0,#0
   LDMFD   (sp)!,{r1-r5,pc}              ; Return from call

.readstick0
; <= r0 = flags:
;           b0-7    - signed x position
;           b8-15   - signed y position
;           b16-23  - button bits
   MOV     r0,#0
   BL      $getdata
   XBL     $checkpressed,,,,8,&40
   XBL     $checkpressed,,,,4,&C0
   XBL     $checkpressed,,,,2,&C000
   XBL     $checkpressed,,,,1,&4000
   XBL     $checkpressed,,,,16,&10000
;    REM     "Set = %r0"
   CMP     r1, r1                        ; clear overflow
   LDMFD   (sp)!,{r1-r5,pc}              ; Return from call

$checkpressed
   TST     r2,r3
   ORRNE   r0,r0,r4
   MOV     pc,link

$getdata
   STMFD   (sp)!,{r0-r1,r5,link}            ; Stack registers
   XSWI    XParallel_Op,2,36,NOT 36         ; set as input
   BVS     $nodata
   XSWI    XParallel_Op,0,0,0               ; read data
   XSWIVC  XParallel_Op,2,4,NOT 36          ; set as output
   XSWIVC  XParallel_Op,1,0,-1
   MOV     r2,r5
$nodata
   MOVVS   r2, #0
   LDMFD   (sp)!,{r0-r1,r5,pc}              ; Return from call


#Post
#Run <CODE>
